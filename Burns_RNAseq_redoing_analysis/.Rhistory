library("vegan")
library("ggpubr")
library("rstatix")
ggplot(B02_S2, aes(aes(x=target_id, y=log_tpm))) +
geom_bar(stat = "identity")
ggplot(B02_S2, aes(x=target_id, y=log_tpm)) +
geom_bar(stat = "identity")
hist_DF <- B02_S2$log_tpm
hist(hist_DF)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram()
B02_S2 <- read.table(file = 'TPM_abundances_from_kallisto/B02_S2_abundance.tsv', sep = '\t', header = TRUE)
B02_S2$tpm = B02_S2$tpm + 1
B02_S2$log_tpm=log(B02_S2$tpm)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram()
files_to_read <- list.files(path = "TPM_abundances_from_kallisto/",pattern = "\\.tsv$",full.names = T)
all_files <- lapply(files_to_read,function(x) {
read.table(file = x,
sep = '\t',
header = TRUE)
})
#this gives us a list called all_files, which is a list of all the TPM abundance files
#step 2: log transform (after adding 1, which I... did not know about)
for (file in all_files){
file$tpm = file$tpm + 1
file$log_tpm=log(file$tpm)
#file[file == -Inf] <- 0
}
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram() +
ylim(c(0,300000))
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram()
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(binwidth = 3)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(binwidth=3)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(binwidth=300)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(binwidth=30)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram()
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=50)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=100)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=1000)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=500)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=250)
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=250) +
ylim(c(0,25000))
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=250) +
ylim(c(0,5000))
#aha, actually want a histogram: "analyze a histogram of log-transformed TPM values in a sample. "
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=250) +
ylim(c(0,3000))
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=500) +
ylim(c(0,3000))
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=500) +
ylim(c(0,3000)) +
ggtitle("B02_S2, Bin size = 500")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=500) +
ylim(c(0,3000)) +
ggtitle("B02_S2, Bin size = 500")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=250) +
ylim(c(0,3000)) +
ggtitle("B02_S2, Bin size = 250")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=100) +
ylim(c(0,3000)) +
ggtitle("B02_S2, Bin size = 100")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=100) +
ylim(c(0,5000)) +
ggtitle("B02_S2, Bin size = 100")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=100) +
ylim(c(0,8000)) +
ggtitle("B02_S2, Bin size = 100")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=1000) +
ylim(c(0,1000)) +
ggtitle("B02_S2, Bin size = 1000")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=4) +
ylim(c(0,100000)) +
ggtitle("B02_S2, Bin size = 1000")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=4) +
ylim(c(0,25000)) +
ggtitle("B02_S2, Bin size = 1000")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=500) +
ylim(c(0,3000)) +
ggtitle("B02_S2, Bin size = 1000")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=500) +
ylim(c(0,3000)) +
xlim(c(0,10)) +
ggtitle("B02_S2")
ggplot(B02_S2, aes(x=log_tpm)) +
geom_histogram(bins=500) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2")
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 100))) +
geom_histogram(bins=500) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2") +
geom_histogram(show.legend = FALSE)
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 100))) +
geom_histogram(bins=500) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2") +
geom_histogram(show.legend = FALSE)
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2") +
geom_histogram(show.legend = FALSE)
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2")
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
scale_fill_discrete(h = c(240, 10)) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2")
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
scale_fill_discrete(h = c(140, 10)) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2")
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
scale_fill_discrete(h = c(440, 10)) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2")
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
scale_fill_discrete(h = c(10,440)) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2")
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2")
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5))
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 0.5))
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5)) +
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
scale_x_continuous(breaks=seq(0,10,0.5)) +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5)) +
#aha, actually want a histogram: "analyze a histogram of log-transformed TPM values in a sample. "
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
scale_x_continuous(breaks=seq(0,10,0.5)) +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5))
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5))
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
#ylim(c(0,2000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
scale_y_continuous(breaks=seq(0,2000,250), name= "gene counts") +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5))
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
scale_y_continuous(breaks=seq(0,2000,250), name= "gene counts") +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5))
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
scale_y_continuous(name= "gene counts") +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5))
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
#scale_y_continuous(breaks=seq(0,2000,250), name= "gene counts") +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5))
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
#scale_y_continuous(breaks=seq(0,2000,250), name= "gene counts") +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5))
for (df in all_files) {
filename <- names(df)
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
ggsave(default_name(plot), plot = last_plot(),
device = default_device(filename), path = NULL)
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
ggsave(filename= default_name(plot), plot = last_plot(),
device = default_device(filename), path = NULL)
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
ggsave(filename= plot, plot = last_plot(),
device = default_device(filename), path = NULL)
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
ggsave(filename= plot, plot = last_plot())
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
ggsave(plot = last_plot())
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
ggsave(filename = df)
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
ggsave(filename = df, device = default_device(filename))
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
ggsave(filename = df, device = filename)
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
ggsave(filename = df, device = NULL)
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
#ggsave(filename = df, device = NULL)
}
View(histogram)
View(histogram)
View(histogram)
histogra
histogram
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=500, show.legend = FALSE) +
ylim(c(0,2000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
#scale_y_continuous(breaks=seq(0,2000,250), name= "gene counts") +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=500") +
theme(plot.title = element_text(hjust=0.5))
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,2000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
#scale_y_continuous(breaks=seq(0,2000,250), name= "gene counts") +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=250") +
theme(plot.title = element_text(hjust=0.5))
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,3000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
#scale_y_continuous(breaks=seq(0,2000,250), name= "gene counts") +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=250") +
theme(plot.title = element_text(hjust=0.5))
files_to_read
files_to_read <- list.files(path = "TPM_abundances_from_kallisto/",pattern = ".tsv$",full.names = T)
files_to_read
all_files <- lapply(files_to_read,function(x) {
read.table(file = x,
sep = '\t',
header = TRUE)
})
for (file in all_files){
file$tpm = file$tpm + 1
file$log_tpm=log(file$tpm)
#file[file == -Inf] <- 0
}
plots <- lapply(all_files,function(x) {
ggplot(x, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,3000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
ggtitle("B02_S2, binwidth=250") +
theme(plot.title = element_text(hjust=0.5))
})
lapply(names(plots),
function(x) ggsave(filename=paste(x,".jpeg",sep=""), plot=plots[[x]]))
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
#ggsave(filename = df, device = NULL)
}
View(plots)
pdf("rplots.pdf")
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
#ggsave(filename = df, device = NULL)
}
dev.off()
print(plots)
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
#ggsave(filename = df, device = NULL)
}
View(plots)
View(histogram)
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500)))
ggsave(df, plot= histogram, device= "pdf")
}
plots <- lapply(all_files,function(x) {
ggplot(x, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,3000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
ggtitle("B02_S2, binwidth=250") +
theme(plot.title = element_text(hjust=0.5))
})
ggplot(B02_S2, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,3000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
#scale_y_continuous(breaks=seq(0,2000,250), name= "gene counts") +
#xlim(c(0,10)) +
ggtitle("B02_S2, binwidth=250") +
theme(plot.title = element_text(hjust=0.5))
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,3000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10))
#ggsave(df, plot= histogram, device= "pdf")
}
print(plots)
for (file in all_files){
file$tpm = file$tpm + 1
file$log_tpm=log(file$tpm)
#file[file == -Inf] <- 0
}
for (df in all_files) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,3000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10))
#ggsave(df, plot= histogram, device= "pdf")
}
print(plots)
View(all_files)
files_to_read <- list.files(path = "TPM_abundances_from_kallisto/",pattern = ".tsv$",full.names = T)
all_files <- lapply(files_to_read,function(x) {
read.table(file = x,
sep = '\t',
header = TRUE)
})
for (file in all_files){
file$tpm = file$tpm + 1
file$log_tpm=log(file$tpm)
#file[file == -Inf] <- 0
}
for (file in all_files){
print(file)
#file$tpm = file$tpm + 1
#file$log_tpm=log(file$tpm)
#file[file == -Inf] <- 0
}
for (file in all_files){
file$tpm = file$tpm + 1
#file$log_tpm=log(file$tpm)
#file[file == -Inf] <- 0
}
View(all_files)
View(all_files)
for (file in all_files){
file$tpm = file$tpm + 1
}
View(all_files)
files_to_read2 <- list.files(path = "TPM_abundances_from_kallisto/",pattern = "adjusted.tsv$",full.names = T)
all_files2 <- lapply(files_to_read2,function(x) {
read.table(file = x,
sep = '\t',
header = TRUE)
})
files_to_read2 <- list.files(path = "TPM_abundances_from_kallisto/",pattern = "_adjusted.tsv",full.names = T)
all_files2 <- lapply(files_to_read2,function(x) {
read.table(file = x,
sep = '\t',
header = TRUE)
})
files_to_read2 <- list.files(path = "TPM_abundances_from_kallisto/",pattern = "^_adjusted.tsv",full.names = T)
all_files2 <- lapply(files_to_read2,function(x) {
read.table(file = x,
sep = '\t',
header = TRUE)
})
files_to_read2 <- list.files(path = "TPM_abundances_from_kallisto/",pattern = "adjusted",full.names = T)
all_files2 <- lapply(files_to_read2,function(x) {
read.table(file = x,
sep = '\t',
header = TRUE)
})
for (df in all_files2) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,3000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10))
#ggsave(df, plot= histogram, device= "pdf")
}
View(plots)
pdf("rplots.pdf")
print(plots)
dev.off()
all_files2 <- lapply(files_to_read2,function(x) {
read.table(file = x,
sep = ',',
header = TRUE)
})
View(all_files2)
for (df in all_files2) {
histogram <- ggplot(df, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,3000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10))
#ggsave(df, plot= histogram, device= "pdf")
}
pdf("rplots.pdf")
print(plots)
dev.off()
View(plots)
print(plots)
plots <- lapply(all_files2,function(x) {
ggplot(x, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,3000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
ggtitle("B02_S2, binwidth=250") +
theme(plot.title = element_text(hjust=0.5))
})
pdf("rplots.pdf")
print(plots)
dev.off()
plots <- lapply(all_files2,function(x) {
ggplot(x, aes(x=log_tpm, fill=cut(log_tpm, 500))) +
geom_histogram(bins=250, show.legend = FALSE) +
ylim(c(0,3000)) +
scale_x_continuous(breaks=seq(0,10,0.5), limits=c(0,10)) +
ggtitle(x, "binwidth=250") +
theme(plot.title = element_text(hjust=0.5))
})
#step 3: save
pdf("rplots2.pdf")
print(plots)
dev.off()
