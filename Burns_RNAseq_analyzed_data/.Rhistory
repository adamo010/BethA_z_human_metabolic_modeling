scale_fill_brewer(palette = "Dark2") +
scale_color_brewer(palette = "Dark2") +
theme(legend.position = "bottom", legend.title=element_blank(), legend.text=element_text(size=11)) +
guides(fill=FALSE)
ggpaired(subset(GR_differences_by_family_point_one, family %in% c("Ruminococcaceae")), cond1= "mean_family_GR_normal", cond2= "mean_family_GR_tumor",
y= "growth_rate", fill = "condition", line.color = "Difference_direction") +
#stat_compare_means(paired= TRUE, vjust=0.5) +
labs(title = expression("Tradeoff 0.1, "*italic("Ruminococcaceae")), subtitle= expression("Wilcoxan, p=0.0062, q= 0.152")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle= element_text(hjust=0.5)) +
scale_y_continuous(name = "Average taxon growth\nrate, mmol/(gDW * h)", limits=c(0,0.4)) +
scale_x_discrete(labels = c('Normal','Tumor')) +
scale_fill_brewer(palette = "Dark2") +
scale_color_brewer(palette = "Dark2") +
theme(legend.position = "bottom", legend.title=element_blank(), legend.text=element_text(size=11)) +
guides(fill=FALSE)
ggpaired(subset(GR_differences_by_family_point_one, family %in% c("Ruminococcaceae")), cond1= "mean_family_GR_normal", cond2= "mean_family_GR_tumor",
y= "growth_rate", fill = "condition", line.color = "Difference_direction") +
#stat_compare_means(paired= TRUE, vjust=0.5) +
labs(title = expression("Tradeoff 0.1, Ruminococcaceae"), subtitle= expression("Wilcoxan, p=0.0062, q= 0.152")) +
theme(plot.title = element_text(hjust=0.5), plot.subtitle= element_text(hjust=0.5)) +
scale_y_continuous(name = "Average taxon growth\nrate, mmol/(gDW * h)", limits=c(0,0.4)) +
scale_x_discrete(labels = c('Normal','Tumor')) +
scale_fill_brewer(palette = "Dark2") +
scale_color_brewer(palette = "Dark2") +
theme(legend.position = "bottom", legend.title=element_blank(), legend.text=element_text(size=11)) +
guides(fill=FALSE)
library("ggplot2")
library("readxl")
library("dplyr")
library("tidyverse")
library("ggpubr")
library("ape")
library("lme4")
library("gplots")
library("plotly")
library("tidyr")
library("vegan")
library("ggpubr")
library("rstatix")
Indiv_GRs_point_five <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.08.21_EUstd_diet_TD0.5_indiv_spp_GRs.csv")
Indiv_GRs_point_five <- select(Indiv_GRs_point_five, -X1)
Indiv_GRs_point_two_five <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.08.21_EUstd_diet_TD0.25_indiv_spp_GRs.csv")
Indiv_GRs_point_two_five <- select(Indiv_GRs_point_two_five, -X1)
Indiv_GRs_point_one <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.08.21_EUstd_diet_TD0.1_indiv_spp_GRs.csv")
Indiv_GRs_point_one <- select(Indiv_GRs_point_one, -X1)
Indiv_GRs_point_five$OTU_ID <- as.factor(Indiv_GRs_point_five$OTU_ID)
Indiv_GRs_point_two_five$OTU_ID <- as.factor(Indiv_GRs_point_two_five$OTU_ID)
Indiv_GRs_point_one$OTU_ID <- as.factor(Indiv_GRs_point_one$OTU_ID)
Indiv_GRs_point_five_with_metadata <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.08.21_EUstd_diet_TD0.5_indiv_spp_GRs_with_metadata.csv")
Indiv_GRs_point_five_with_metadata <- select(Indiv_GRs_point_five_with_metadata, -X1)
Indiv_GRs_point_two_five_with_metadata <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.08.21_EUstd_diet_TD0.25_indiv_spp_GRs_with_metadata.csv")
Indiv_GRs_point_two_five_with_metadata <- select(Indiv_GRs_point_two_five_with_metadata, -X1)
Indiv_GRs_point_one_with_metadata <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.08.21_EUstd_diet_TD0.1_indiv_spp_GRs_with_metadata.csv")
Indiv_GRs_point_one_with_metadata <- select(Indiv_GRs_point_one_with_metadata, -X1)
#set a bunch of stuff as factors to make graphing easier
Indiv_GRs_point_five_with_metadata$OTU_ID <- as.factor(Indiv_GRs_point_five_with_metadata$OTU_ID)
Indiv_GRs_point_two_five_with_metadata$OTU_ID <- as.factor(Indiv_GRs_point_two_five_with_metadata$OTU_ID)
Indiv_GRs_point_one_with_metadata$OTU_ID <- as.factor(Indiv_GRs_point_one_with_metadata$OTU_ID)
Indiv_GRs_point_five_with_metadata$Patient_Blind_ID <- as.factor(Indiv_GRs_point_five_with_metadata$Patient_Blind_ID)
Indiv_GRs_point_two_five_with_metadata$Patient_Blind_ID <- as.factor(Indiv_GRs_point_two_five_with_metadata$Patient_Blind_ID)
Indiv_GRs_point_one_with_metadata$Patient_Blind_ID <- as.factor(Indiv_GRs_point_one_with_metadata$Patient_Blind_ID)
GR_differences_point_five <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.09.21_EUstd_diet_TD0.5_tumor_v_normal_indiv_GRs.csv")
GR_differences_point_two_five <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.09.21_EUstd_diet_TD0.25_tumor_v_normal_indiv_GRs.csv")
GR_differences_point_one<- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.09.21_EUstd_diet_TD0.1_tumor_v_normal_indiv_GRs.csv")
#bunch of extra columns here but who cares.
#make some columns factors
GR_differences_point_five$OTU_ID <- as.factor(GR_differences_point_five$OTU_ID)
GR_differences_point_two_five$OTU_ID <- as.factor(GR_differences_point_two_five$OTU_ID)
GR_differences_point_one$OTU_ID <- as.factor(GR_differences_point_one$OTU_ID)
GR_differences_point_five$Patient_Blind_ID <- as.factor(GR_differences_point_five$Patient_Blind_ID)
GR_differences_point_two_five$Patient_Blind_ID <- as.factor(GR_differences_point_two_five$Patient_Blind_ID)
GR_differences_point_one$Patient_Blind_ID <- as.factor(GR_differences_point_one$Patient_Blind_ID)
GR_differences_point_five$OTU_ID <- as.factor(GR_differences_point_five$OTU_ID)
GR_differences_point_two_five$OTU_ID <- as.factor(GR_differences_point_two_five$OTU_ID)
GR_differences_point_one$OTU_ID <- as.factor(GR_differences_point_one$OTU_ID)
GR_differences_point_five$Patient_Blind_ID <- as.factor(GR_differences_point_five$Patient_Blind_ID)
GR_differences_point_two_five$Patient_Blind_ID <- as.factor(GR_differences_point_two_five$Patient_Blind_ID)
GR_differences_point_one$Patient_Blind_ID <- as.factor(GR_differences_point_one$Patient_Blind_ID)
ggplot(GR_differences_point_one, aes(x = genus, y = growth_rate_difference, color= Patient_Blind_ID)) +
geom_hline(yintercept=0) +
geom_point(aes(fill= Patient_Blind_ID)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position='none') +
ggtitle("Difference in OTU growth rates for tumor vs normal samples\n(Tradeoff 0.1, colors represent Patient_IDs)") +
theme(plot.title = element_text(hjust=0.5)) +
scale_y_continuous(name = "Tumor - normal growth rate,\nmmol/(gDW * h)") +
scale_x_discrete(name = "Genus")
library("ggplot2")
library("readxl")
library("dplyr")
library("tidyverse")
library("ggpubr")
library("ape")
library("lme4")
library("gplots")
library("plotly")
library("tidyr")
library("vegan")
GR_by_family_point_one <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.11.21_EUstd_diet_TD0.1_collapsed_to_family.csv")
GR_by_family_point_one$Patient_Blind_ID <- as.factor(GR_by_family_point_one$Patient_Blind_ID)
#Step 2: reorder and add columns for filtering and stats
#colnames(GR_by_family_point_one) #use as needed
GR_by_family_point_one <- GR_by_family_point_one[, c(1,2,3,4,5,6,10,7,8,9,11,12,13)]
family_point_one_paired <- GR_by_family_point_one  %>% unite("sorting_col", family:Patient_Blind_ID, remove = FALSE)
family_point_one_paired_only <- subset(family_point_one_paired,duplicated(sorting_col) | duplicated(sorting_col, fromLast=TRUE))
#Step 3: split into multiple dataframes by family and do stats on each family
split_0.1_GR_family <- split(family_point_one_paired_only, with(family_point_one_paired_only, interaction(family)), drop = TRUE)
family_0.1_stats <- lapply(split_0.1_GR_family, function(df){wilcox.test(mean_family_GR~Description, data=df, exact= FALSE, paired= TRUE)})
#step 4: make lists of p values
family_0.1_pvals <- c() #can I just do this to initialize the vector? Yes. Otherwise, without this, get an error "family_0.1_pvals not found"
for (elem in family_0.1_stats){
new_value = elem$p.value
family_0.1_pvals <- c(family_0.1_pvals, new_value)}
rm(new_value)
#step 5: make a list of q-values
family_0.1_qvals <- p.adjust(family_0.1_pvals, method = "fdr")
#step 6: make a list of family_ids
family_ids_point_one <- c()
for(elem in split_0.1_GR_family){
new_value = elem$family[1]
family_ids_point_one <- c(family_ids_point_one, new_value)}
#step 7: merge all lists together.
family_0.1_statistics <- data.frame(family_ids_point_one, family_0.1_pvals, family_0.1_qvals)
##############THEN GENUS LEVEL
#step 1: import data and adjust factors
GR_by_genus_point_one <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.11.21_EUstd_diet_TD0.1_collapsed_to_genus.csv")
GR_by_genus_point_one$Patient_Blind_ID <- as.factor(GR_by_genus_point_one$Patient_Blind_ID)
#Step 2: reorder and add columns for filtering and stats
#colnames(GR_by_genus_point_one) #use as needed
GR_by_genus_point_one <- GR_by_genus_point_one[, c(1,2,3,4,5,6,10,7,8,9,11,12,13)]
genus_point_one_paired <- GR_by_genus_point_one  %>% unite("sorting_col", genus:Patient_Blind_ID, remove = FALSE)
genus_point_one_paired_only <- subset(genus_point_one_paired,duplicated(sorting_col) | duplicated(sorting_col, fromLast=TRUE))
#Step 3: split into multiple dataframes by genus and do stats on each genus
split_0.1_GR_genus <- split(genus_point_one_paired_only, with(genus_point_one_paired_only, interaction(genus)), drop = TRUE)
genus_0.1_stats <- lapply(split_0.1_GR_genus, function(df){wilcox.test(mean_genus_GR~Description, data=df, exact= FALSE, paired= TRUE)})
#step 4: make lists of p values
genus_0.1_pvals <- c() #can I just do this to initialize the vector? Yes. Otherwise, without this, get an error "genus_0.1_pvals not found"
for (elem in genus_0.1_stats){
new_value = elem$p.value
genus_0.1_pvals <- c(genus_0.1_pvals, new_value)}
rm(new_value)
#step 5: make a list of q-values
genus_0.1_qvals <- p.adjust(genus_0.1_pvals, method = "fdr")
#step 6: make a list of genus_ids
genus_ids_point_one <- c()
for(elem in split_0.1_GR_genus){
new_value = elem$genus[1]
genus_ids_point_one <- c(genus_ids_point_one, new_value)}
#step 7: merge all lists together.
genus_0.1_statistics <- data.frame(genus_ids_point_one, genus_0.1_pvals, genus_0.1_qvals)
View(family_0.1_stats)
View(family_0.1_statistics)
View(family_point_one_paired)
View(family_point_one_paired_only)
rm(elem, family_0.1_stats, family_point_one_paired, family_point_one_paired_only, genus_0.1_stats, genus_point_one_paired, genus_point_one_paired_only,
GR_by_family_point_one, GR_by_genus_point_one, split_0.1_GR_family, split_0.1_GR_genus, family_0.1_pvals, family_0.1_qvals, family_ids_point_one,
genus_0.1_pvals, genus_0.1_qvals, genus_point_one_paired, new_value)
rm(genus_ids_point_one)
View(genus_0.1_statistics)
GR_by_genus_point_one <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.11.21_EUstd_diet_TD0.1_collapsed_to_genus.csv")
GR_by_genus_point_one$Patient_Blind_ID <- as.factor(GR_by_genus_point_one$Patient_Blind_ID)
#Step 2: reorder and add columns for filtering and stats
colnames(GR_by_genus_point_one) #gotta do famgen first! don't need to reorder because it's already resorted
GR_by_genus_point_one_famgen <- GR_by_genus_point_one  %>% unite("famgen_col", family:genus, remove = FALSE)
colnames(GR_by_genus_point_one_famgen)
#now rearrange so famgen and patient_blind_ID are next to each other.
GR_by_genus_point_one_famgen <- GR_by_genus_point_one_famgen[, c(1,2,3,4,5,6,12,7,8,9,10,11,13,14,15)]
genus_point_one_paired <- GR_by_genus_point_one_famgen   %>% unite("sorting_col", famgen_col:Patient_Blind_ID, remove = FALSE)
genus_point_one_paired_only <- subset(genus_point_one_paired,duplicated(sorting_col) | duplicated(sorting_col, fromLast=TRUE))
#Step 3: split into multiple dataframes by genus and do stats on each genus
split_0.1_GR_genus <- split(genus_point_one_paired_only, with(genus_point_one_paired_only, interaction(famgen_col)), drop = TRUE)
genus_0.1_stats <- lapply(split_0.1_GR_genus, function(df){wilcox.test(mean_genus_GR~Description, data=df, exact= FALSE, paired= TRUE)})
#step 4: make lists of p values
genus_0.1_pvals <- c() #initialize list
for (elem in genus_0.1_stats){
new_value = elem$p.value
genus_0.1_pvals <- c(genus_0.1_pvals, new_value)}
rm(new_value)
#step 5: make a list of q-values
genus_0.1_qvals <- p.adjust(genus_0.1_pvals, method = "fdr")
#step 6: make a list of genus_ids
genus_ids_point_one <- c()
for(elem in split_0.1_GR_genus){
new_value = elem$famgen_col[1]
genus_ids_point_one <- c(genus_ids_point_one, new_value)}
#step 7: merge all lists together.
genus_0.1_statistics <- data.frame(genus_ids_point_one, genus_0.1_pvals, genus_0.1_qvals)
View(genus_0.1_statistics)
rm(elem, family_0.1_stats, family_point_one_paired, family_point_one_paired_only, genus_0.1_stats, genus_point_one_paired, genus_point_one_paired_only,
GR_by_family_point_one, GR_by_genus_point_one, split_0.1_GR_family, split_0.1_GR_genus, family_0.1_pvals, family_0.1_qvals, family_ids_point_one,
genus_0.1_pvals, genus_0.1_qvals, genus_ids_point_one, new_value)
View(GR_by_genus_point_one_famgen)
rm(genus_ids_point_one_famgen)
rm(GR_by_genus_point_one_famgen)
family_0.1_statistics <- family_0.1_statistics[order(family_0.1_statistics$family_0.1_pvals),] #re-order by p-value
genus_0.1_statistics <- genus_0.1_statistics[order(genus_0.1_statistics$genus_0.1_pvals),] #re-order by p-value
View(family_0.1_statistics)
View(family_0.1_statistics)
View(genus_0.1_statistics)
top_ten_genera <- genus_0.1_statistics %>% top_n(genus_0.1_statistics, n=10)
top_ten_genera <- genus_0.1_statistics %>% top_n(10, genus_0.1_pvals)
View(top_ten_genera)
family_0.1_statistics <- family_0.1_statistics[order(family_0.1_statistics$family_0.1_pvals),] #re-order by p-value
View(family_0.1_statistics)
top_ten_genera <- genus_0.1_statistics %>% top_n(-10, genus_0.1_pvals)
View(top_ten_genera)
top_ten_genera2 <- genus_0.1_statistics %>% top_n(-10, genus_0.1_qvals) #note the -10 here to select the smallest p-values
View(top_ten_genera2)
View(top_ten_genera)
growth_rates_all <-read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.09.21_EUstd_diet_TD0.1_tumor_v_normal_indiv_GRs.csv")
View(growth_rates_all)
View(top_ten_genera2)
growth_rates_all %>%
mutate(family_genus = paste0(family, "_", genus))
View(growth_rates_all)
growth_rates_all <- growth_rates_all %>%
mutate(family_genus = paste0(family, "_", genus))
View(growth_rates_all)
top_genera_names <- as.vector(top_ten_genera2['genus_ids_point_one'])
View(top_genera_names)
growth_rates_top_genera <- filter(growth_rates_all, family_genus %in% top_genera_names)
View(growth_rates_top_genera)
View(growth_rates_all)
View(top_ten_genera2)
View(top_genera_names)
top_genera_names <- as.numeric(top_genera_names[1,])
top_genera_names <- as.vector(top_ten_genera2['genus_ids_point_one']) #make a vector from a column
as.numeric(top_genera_names[1,])
top_genera_names <- as.vector(top_ten_genera2['genus_ids_point_one']) #make a vector from a column
as.numeric(top_genera_names[1,])
View(top_genera_names)
as.character(top_genera_names[1,])
top_genera_names <- as.character(top_genera_names[1,])
top_genera_names <- as.vector(top_ten_genera2['genus_ids_point_one'],mode=list) #make a vector from a column
top_genera_names <- as.vector(top_ten_genera2['genus_ids_point_one'],mode=character) #make a vector from a column
?mode
top_genera_names <- as.vector(top_ten_genera2['genus_ids_point_one'],mode="character") #make a vector from a column
top_genera_names
top_genera_names <- pull(top_ten_genera2,genus_ids_point_one) #make a vector from a column
top_genera_names
growth_rates_top_genera <- filter(growth_rates_all, family_genus %in% top_genera_names)
View(growth_rates_top_genera)
View(growth_rates_top_genera)
host_gene_expression <- read_csv("/Users/adamo010/Documents/CORDA_CRC_human_models/Burns_RNAseq_analyzed_data/04.07.21_DEseq2_sig_results_Burns_data.csv")
View(host_gene_expression)
View(host_gene_expression)
View(host_gene_expression)
host_gene_expression %>%
arrange(desc(abs(log2FoldChange))) #thanks dplyr!
View(growth_rates_top_genera)
View(host_gene_expression)
top_host_gene_expression <- host_gene_expression %>% top_n(250, abs(log2FoldChange))
View(top_host_gene_expression)
View(top_host_gene_expression)
View(top_host_gene_expression)
View(growth_rates_all)
View(host_gene_expression)
growth_rates_all <- growth_rates_all[ , ! names(growth_rates_all) %in% c("Description", "Sample_ID", "unique_id")]
View(growth_rates_all)
growth_rates_subset <- growth_rates_all[ , names(growth_rates_all) %in% c("OTU_ID", "Patient_Blind_ID", "growth_rate_difference", "family_genus")]
View(growth_rates_subset)
growth_rates_subset_wide <- spread(growth_rates_subset, otu_id, growth_rate_difference)
growth_rates_subset_wide <- spread(growth_rates_subset, OTU_ID, growth_rate_difference)
View(growth_rates_subset_wide)
View(top_ten_genera2)
growth_rates_subset <- growth_rates_all[ , names(growth_rates_all) %in% c("Patient_Blind_ID", "growth_rate_difference", "family_genus")]
growth_rates_subset_wide <- spread(growth_rates_subset, family_genus, growth_rate_difference)
growth_rates_subset_wide <- spread(growth_rates_subset, family_genus, growth_rate_difference)
View(growth_rates_subset_wide)
rm(growth_rates_subset, growth_rates_subset_wide)
growth_rates_subset <- growth_rates_all[ , names(growth_rates_all) %in% c("Patient_Blind_ID", "growth_rate_difference", "family_genus")]
growth_rates_subset_wide <- spread(growth_rates_subset, family_genus, growth_rate_difference)
rm(growth_rates_subset, growth_rates_subset_wide)
growth_rates_subset <- growth_rates_all[ , names(growth_rates_all) %in% c("Patient_Blind_ID", "growth_rate_difference", "OTU_ID")]
growth_rates_subset_wide <- spread(growth_rates_subset, OTU_ID, growth_rate_difference)
View(growth_rates_subset_wide)
View(growth_rates_top_genera)
View(growth_rates_top_genera)
View(top_ten_genera2)
growth_rates_top_genera_unique -> growth_rates_top_genera[!duplicated(growth_rates_top_genera$OTU_ID), ]
growth_rates_top_genera_unique2 -> growth_rates_top_genera[!duplicated(growth_rates_top_genera$family_genus), ]
growth_rates_top_genera_unique <- growth_rates_top_genera[!duplicated(growth_rates_top_genera$OTU_ID), ]
growth_rates_top_genera_unique2 <- growth_rates_top_genera[!duplicated(growth_rates_top_genera$family_genus), ]
View(growth_rates_top_genera_unique)
View(growth_rates_top_genera_unique2)
growth_rates_all2 <- growth_rates_all %>%
mutate(unique_ID = paste0(family_genus, "_", Patient_Blind_ID))
View(growth_rates_all2)
growth_rates_all2 %>%                                        # Specify data frame
group_by(unique_ID) %>%                         # Specify group indicator
summarise_at(vars(growth_rate_difference),              # Specify column
list(name = mean))               # Specify function
growth_rates_all2 <- growth_rates_all2 %>%                                        # Specify data frame
group_by(unique_ID) %>%                         # Specify group indicator
summarise_at(vars(growth_rate_difference),              # Specify column
list(name = mean))               # Specify function
View(growth_rates_all2)
View(growth_rates_subset)
growth_rates_subset2 <- growth_rates_all[ , names(growth_rates_all) %in% c("Patient_Blind_ID", "growth_rate_difference", "OTU_ID", "family_genus")]
View(growth_rates_all2)
rm(growth_rates_all2)
View(growth_rates_subset2)
growth_rates_subset2 <- growth_rates_subset2 %>%
mutate(sorting_col = paste0(family_genus, "_", Patient_Blind_ID))
View(growth_rates_subset2)
growth_rates_subset2_averaged <- growth_rates_all2 %>%                                        # Specify data frame
group_by(sorting_col) %>%                         # Specify group indicator
summarise_at(vars(growth_rate_difference),              # Specify column
list(av_growth_rate_difference = mean))               # Specify function
growth_rates_subset2_averaged <- growth_rates_subset2 %>%                                        # Specify data frame
group_by(sorting_col) %>%                         # Specify group indicator
summarise_at(vars(growth_rate_difference),              # Specify column
list(av_growth_rate_difference = mean))               # Specify function
View(growth_rates_subset2)
View(growth_rates_subset2_averaged)
View(growth_rates_subset2_averaged)
View(growth_rates_subset2)
growth_rates_subset2_averaged <- growth_rates_subset2 %>%                                        # Specify data frame
group_by(sorting_col, Patient_Blind_ID, family_genus) %>%                         # Specify group indicator
summarise_at(vars(growth_rate_difference),              # Specify column
list(av_growth_rate_difference = mean))               # Specify function
View(growth_rates_subset2_averaged)
growth_rates_subset2_averaged <- growth_rates_subset2_averaged[ , ! names(growth_rates_subset2_averaged) %in% c("sorting_col")]
growth_rates_subset2_wide <- spread(growth_rates_subset2_averaged, OTU_ID, growth_rate_difference)
growth_rates_subset2_wide <- spread(growth_rates_subset2_averaged, family_genus, av_growth_rate_difference)
View(growth_rates_subset_wide)
View(growth_rates_subset2_averaged)
growth_rates_subset2_wide <- spread(growth_rates_subset2_averaged, family_genus, av_growth_rate_difference)
View(growth_rates_subset2_wide)
View(growth_rates_subset2_wide)
growth_rates_for_correlating <- growth_rates_subset2_wide %>% select(top_genera_names)
growth_rates_for_correlating <- growth_rates_subset2_wide %>% select(all_of(top_genera_names))
top_genera_names
rownames(growth_rates_subset2_wide) <- growth_rates_subset2_wide[,1] #Assigning row names from 1st column
growth_rates_subset2_wide <- column_to_rownames(growth_rates_subset2_wide, loc = 1)
View(growth_rates_subset2_wide)
growth_rates_subset2_wide <- growth_rates_subset2_wide[-1]
row.names(growth_rates_subset2_wide) <- growth_rates_subset2_wide$Patient_Blind_ID
View(growth_rates_subset_wide)
View(growth_rates_subset2_wide)
growth_rates_subset2_wide <- spread(growth_rates_subset2_averaged, family_genus, av_growth_rate_difference)
column_to_rownames(growth_rates_subset2_wide, var = "Patient_Blind_ID")
growth_rates_subset2_wide <- column_to_rownames(growth_rates_subset2_wide, var = "Patient_Blind_ID")
View(growth_rates_subset2_wide)
growth_rates_for_correlating <- growth_rates_subset2_wide %>% select(all_of(top_genera_names))
View(growth_rates_for_correlating)
View(top_host_gene_expression)
View(top_host_gene_expression)
top_gene_names <- pull(top_host_gene_expression,X1) #make a vector from a column:thanks dplyr!
top_gene_names
View(host_gene_expression)
library("ggplot2")
library("readxl")
library("dplyr")
library("tidyverse")
library("ggpubr")
library("ape")
library("lme4")
library("gplots")
library("plotly")
library("tidyr")
library("vegan")
GR_by_family_point_one <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.11.21_EUstd_diet_TD0.1_collapsed_to_family.csv")
GR_by_family_point_one$Patient_Blind_ID <- as.factor(GR_by_family_point_one$Patient_Blind_ID)
#Step 2: reorder and add columns for filtering and stats
#colnames(GR_by_family_point_one) #use as needed
GR_by_family_point_one <- GR_by_family_point_one[, c(1,2,3,4,5,6,10,7,8,9,11,12,13)]
family_point_one_paired <- GR_by_family_point_one  %>% unite("sorting_col", family:Patient_Blind_ID, remove = FALSE)
family_point_one_paired_only <- subset(family_point_one_paired,duplicated(sorting_col) | duplicated(sorting_col, fromLast=TRUE))
#Step 3: split into multiple dataframes by family and do stats on each family
split_0.1_GR_family <- split(family_point_one_paired_only, with(family_point_one_paired_only, interaction(family)), drop = TRUE)
family_0.1_stats <- lapply(split_0.1_GR_family, function(df){wilcox.test(mean_family_GR~Description, data=df, exact= FALSE, paired= TRUE)})
#step 4: make lists of p values
family_0.1_pvals <- c() #can I just do this to initialize the vector? Yes. Otherwise, without this, get an error "family_0.1_pvals not found"
for (elem in family_0.1_stats){
new_value = elem$p.value
family_0.1_pvals <- c(family_0.1_pvals, new_value)}
rm(new_value)
family_0.1_qvals <- p.adjust(family_0.1_pvals, method = "fdr")
#step 6: make a list of family_ids
family_ids_point_one <- c()
for(elem in split_0.1_GR_family){
new_value = elem$family[1]
family_ids_point_one <- c(family_ids_point_one, new_value)}
#step 7: merge all lists together.
family_0.1_statistics <- data.frame(family_ids_point_one, family_0.1_pvals, family_0.1_qvals)
##############THEN GENUS LEVEL
#step 1: import data and adjust factors
GR_by_genus_point_one <- read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.11.21_EUstd_diet_TD0.1_collapsed_to_genus.csv")
GR_by_genus_point_one$Patient_Blind_ID <- as.factor(GR_by_genus_point_one$Patient_Blind_ID)
#Step 2: reorder and add columns for filtering and stats
colnames(GR_by_genus_point_one) #gotta do famgen first! don't need to reorder because it's already resorted
GR_by_genus_point_one_famgen <- GR_by_genus_point_one  %>% unite("famgen_col", family:genus, remove = FALSE)
colnames(GR_by_genus_point_one_famgen)
#now rearrange so famgen and patient_blind_ID are next to each other.
GR_by_genus_point_one_famgen <- GR_by_genus_point_one_famgen[, c(1,2,3,4,5,6,12,7,8,9,10,11,13,14,15)]
genus_point_one_paired <- GR_by_genus_point_one_famgen   %>% unite("sorting_col", famgen_col:Patient_Blind_ID, remove = FALSE)
genus_point_one_paired_only <- subset(genus_point_one_paired,duplicated(sorting_col) | duplicated(sorting_col, fromLast=TRUE))
#Step 3: split into multiple dataframes by genus and do stats on each genus
split_0.1_GR_genus <- split(genus_point_one_paired_only, with(genus_point_one_paired_only, interaction(famgen_col)), drop = TRUE)
genus_0.1_stats <- lapply(split_0.1_GR_genus, function(df){wilcox.test(mean_genus_GR~Description, data=df, exact= FALSE, paired= TRUE)})
#step 4: make lists of p values
genus_0.1_pvals <- c() #initialize list
for (elem in genus_0.1_stats){
new_value = elem$p.value
genus_0.1_pvals <- c(genus_0.1_pvals, new_value)}
rm(new_value)
#step 5: make a list of q-values
genus_0.1_qvals <- p.adjust(genus_0.1_pvals, method = "fdr")
#step 6: make a list of genus_ids
genus_ids_point_one <- c()
for(elem in split_0.1_GR_genus){
new_value = elem$famgen_col[1]
genus_ids_point_one <- c(genus_ids_point_one, new_value)}
#step 7: merge all lists together.
genus_0.1_statistics <- data.frame(genus_ids_point_one, genus_0.1_pvals, genus_0.1_qvals)
#step 8: now, remove all extra crap
rm(elem, family_0.1_stats, family_point_one_paired, family_point_one_paired_only, genus_0.1_stats, genus_point_one_paired, genus_point_one_paired_only,
GR_by_family_point_one, GR_by_genus_point_one_famgen, split_0.1_GR_family, split_0.1_GR_genus, family_0.1_pvals, family_0.1_qvals, family_ids_point_one,
genus_0.1_pvals, genus_0.1_qvals, genus_ids_point_one, new_value)
######################################################################
#excellent. Now, we want to only pull significant correlations.
family_0.1_statistics <- family_0.1_statistics[order(family_0.1_statistics$family_0.1_pvals),] #re-order by p-value
genus_0.1_statistics <- genus_0.1_statistics[order(genus_0.1_statistics$genus_0.1_pvals),] #re-order by p-value
top_ten_genera <- genus_0.1_statistics %>% top_n(-10, genus_0.1_pvals) #note the -10 here to select the smallest p-values
top_ten_genera2 <- genus_0.1_statistics %>% top_n(-10, genus_0.1_qvals) #go by q-values here: get a list of 14 b/c of ties for q-values
#now, we want to import growth rates and sample info ect. for these taxa
growth_rates_all <-read_csv("/Users/adamo010/Documents/MICOM_CRC_FBA/Individual_specific_microbiomes/Common_growth_medium_runs/EU_MM_post_modeling_analyses/02.09.21_EUstd_diet_TD0.1_tumor_v_normal_indiv_GRs.csv")
#goal: filter this dataframe by the top_ten_genera2 dataframe. In that, genus_ids_point_one has the identifier family_genus
#can I take family and genus columns from growth_rates_all and merge them into a new column?
growth_rates_all <- growth_rates_all %>%
mutate(family_genus = paste0(family, "_", genus)) #dplyr: use paste0 to create a new column, family_genus, from the values in the "family" column plus "_" plus
#the values in the genus column of the dataframe growth_rates_all
#and take a vector of the genus_ids_point_one from top_ten_genera2?
top_genera_names <- pull(top_ten_genera2,genus_ids_point_one) #make a vector from a column:thanks dplyr!
# and use that to filter on the new column?
growth_rates_top_genera <- filter(growth_rates_all, family_genus %in% top_genera_names) #thanks again dplyr!
View(growth_rates_top_genera)
View(top_ten_genera)
View(growth_rates_top_genera)
View(GR_by_genus_point_one)
View(growth_rates_top_genera)
growth_rates_top_genera$growth_rate_normal <- growth_rates_top_genera$growth_rate_normal + 1
growth_rates_top_genera$growth_rate_tumor <- growth_rates_top_genera$growth_rate_tumor + 1
growth_rates_top_genera$growth_rate_normal <- growth_rates_top_genera$log2(growth_rate_normal)
View(growth_rates_top_genera)
growth_rates_top_genera$log2_growth_rate_normal <- growth_rates_top_genera$log2(growth_rate_normal)
growth_rates_top_genera[,c(growth_rate_normal,growth_rate_tumor)] <- log2(growth_rates_top_genera[,c(growth_rate_normal,growth_rate_tumor)])
growth_rates_top_genera[,c("growth_rate_normal","growth_rate_tumor")] <- log2(growth_rates_top_genera[,c("growth_rate_normal","growth_rate_tumor")])
View(growth_rates_top_genera)
growth_rates_top_genera <- filter(growth_rates_all, family_genus %in% top_genera_names) #thanks again dplyr!
View(growth_rates_top_genera)
growth_rates_top_genera$growth_rate_normal <- growth_rates_top_genera$growth_rate_normal + 1
growth_rates_top_genera$growth_rate_tumor <- growth_rates_top_genera$growth_rate_tumor + 1
View(top_ten_genera)
View(growth_rates_top_genera)
growth_rates_top_genera[,c("log2_growth_rate_normal","log2_growth_rate_tumor")] <- log2(growth_rates_top_genera[,c("growth_rate_normal","growth_rate_tumor")])
View(growth_rates_top_genera)
growth_rates_top_genera$log2GRdiff <- (growth_rates_top_genera$log2_growth_rate_tumor - growth_rates_top_genera$log2_growth_rate_normal)
View(growth_rates_top_genera)
write.csv(as.data.frame(growth_rates_top_genera), file="04.13.21_most_differentially_growing_genera_log2_transformed.csv")
library("ggplot2")
library("DESeq2")
library("dplyr")
setwd("/Users/adamo010/Documents/CORDA_CRC_human_models/Burns_RNAseq_analyzed_data")
##############step 1: import counts data (from tximport, or from Sambhawa who has given me the counts table) and metadata
countData <- read.csv('all_samples_protein_coding_subread_counts.txt', header = TRUE, sep="\t")
#head(countData)
metaData <- read.csv('CRC_metadata_rnaseq.txt', header = TRUE, sep = "\t")
head(metaData)
#may need to set patient_blind_id as factor
metaData$Patient_Blind_ID <- as.factor(metaData$Patient_Blind_ID)
##ADDED 04.13.21L drop Tissue.RNA.DNA_Tube_ID, since it is unhelpful. Also drop Height, Weight, BMI, RNA_RIN, RNA_conc
metaData = subset(metaData, select = -c(Tissue.RNA.DNA_Tube_ID, Height, Weight, BMI, RNA_RIN, RNA_conc.) )
##ADED 04.16.21: dropping everything in metadata that's not specifically necessary
metaData2 = subset(metaData, select= c(Patient_Blind_ID, SampleID, Description))
class(metaData2) #check the type of object this is; it is a data.frame
row.names(metaData2) #prints row names; very unhelpful
metaData_sub <- metaData[, c("SampleID")] #copy row names as vector
row.names(metaData) <- metaData_sub #set dataframe row names NOTE: for a dataframe, need to use row.names, not rownames. FUCK R.
metaData = subset(metaData, select= -c(SampleID)) #remove sample ID as a column, since it's a row name now.
metaData2_sub <- metaData2[, c("SampleID")] #copy row names as vector
row.names(metaData2) <- metaData2_sub #set dataframe row names NOTE: for a dataframe, need to use row.names, not rownames. FUCK R.
metaData2 = subset(metaData2, select= -c(SampleID)) #remove sample ID as a column, since it's a row name now.
countData_sub <- countData[, c("X")] #copy row names as vector
row.names(countData) <- countData_sub #set dataframe row names NOTE: for a dataframe, need to use row.names, not rownames. FUCK R.
countData2 = subset(countData, select= -c(X)) #remove sample ID as a column, since it's a row name now.
dds <- DESeqDataSetFromMatrix(countData=countData2,
colData=metaData,
design = ~Patient_Blind_ID + Description) #this part indicates that we have paired data.
dds_from_deseq <- DESeq(dds)
res <- results(dds_from_deseq)
head(results(dds_from_deseq, tidy=TRUE)) #let's look at the results table
summary(res) #summary of results for differential gene expression
res <- res[order(res$padj),] #re-order by p-value
head(res)
resOrdered <- res[order(res$padj),] #re-order by p-value
resSig <- subset(resOrdered, padj < 0.1)
summary(res) #summary of results for differential gene expression
res <- res[order(res$padj),] #re-order by p-value
head(res) #take a look
res <- assay(res) #converts to matrix
res_df <- as.data.frame(res) #converts to dataframe
res_df$Gene <- rownames(res_df) #convert gene names to row names
sigGenes <- rownames(res_df[res_df$padj <= .05,]) #pull out a list of genes (which correspond to rownames) where padj is <=0.05
head(sigGenes)
head(res_df)
top_250_res_df <- res_df %>% top_n(250)
top_250_res_df <- res_df %>% top_n(250, wt= padj)
head(top_250_res_df)
top_250_res_df <- res_df %>% top_n(-250, wt= padj)
head(top_250_res_df)
write.csv(as.data.frame(top_250_res_df), file="04.23.21_DEseq2_sig_results_Burns_data_to_250_DEGs.csv")
